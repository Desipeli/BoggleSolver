{"version":3,"file":"component---src-pages-index-js-e7fb45c1c39fe7ab7b21.js","mappings":"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","sources":["webpack://boggle-solver/./src/components/InputGrid.jsx","webpack://boggle-solver/./src/components/Settings.jsx","webpack://boggle-solver/./src/components/WordInfo.jsx","webpack://boggle-solver/./src/components/WordList.jsx","webpack://boggle-solver/./src/hooks/useLocalStorage.js","webpack://boggle-solver/./src/pages/index.js","webpack://boggle-solver/./src/services/ArrayGraph.js","webpack://boggle-solver/./src/services/SearchWords.js","webpack://boggle-solver/./node_modules/@babel/runtime/helpers/arrayLikeToArray.js","webpack://boggle-solver/./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack://boggle-solver/./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack://boggle-solver/./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack://boggle-solver/./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack://boggle-solver/./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js"],"sourcesContent":["import * as React from 'react'\r\nconst { indexToCoord } = require('../services/ArrayGraph')\r\n\r\nconst InputGrid = ({\r\n  gridSize,\r\n  gridValues,\r\n  setGridValues,\r\n  selectedWord,\r\n  setSelectedWord,\r\n}) => {\r\n  const gridContainerRef = React.useRef(null)\r\n  const inputRefs = React.useRef([])\r\n  const [routeId, setRouteId] = React.useState(0)\r\n\r\n  React.useEffect(() => {\r\n    setRouteId(0)\r\n  }, [selectedWord, gridValues])\r\n\r\n  const handleRouteChange = (value) => {\r\n    const newId = Number(routeId) + Number(value)\r\n    if (newId < 0) {\r\n      setRouteId(selectedWord?.routes.length - 1)\r\n    } else if (newId >= selectedWord?.routes.length) {\r\n      setRouteId(0)\r\n    } else {\r\n      setRouteId(newId)\r\n    }\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    const gridContainer = gridContainerRef.current\r\n\r\n    const mediaQuery = window.matchMedia('(max-width: 439px)')\r\n\r\n    if (mediaQuery.matches) {\r\n      gridContainer.style.gridTemplateColumns = `repeat(${gridSize}, minmax(0, 1fr))`\r\n      gridContainer.style.width = `${gridSize * 2.5}rem`\r\n    } else {\r\n      gridContainer.style.gridTemplateColumns = `repeat(${gridSize}, minmax(0, 1fr))`\r\n      gridContainer.style.width = `${gridSize * 4}rem`\r\n    }\r\n  }, [gridSize])\r\n\r\n  const handleInputKey = (index) => (event) => {\r\n    if (['Backspace'].includes(event.key) && index > 0) {\r\n      if (inputRefs.current[index].value.length === 0) {\r\n        const prevInput = inputRefs.current[index - 1]\r\n        prevInput.focus()\r\n        prevInput.selectionStart = prevInput.value.length\r\n        prevInput.selectionEnd = prevInput.value.length\r\n      }\r\n    }\r\n    if (['Delete'].includes(event.key) && index < gridSize ** 2 - 1) {\r\n      if (inputRefs.current[index].value.length === 0) {\r\n        const nextInput = inputRefs.current[index + 1]\r\n        nextInput.focus()\r\n        nextInput.selectionStart = 0\r\n        nextInput.selectionEnd = 0\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleInputChange = (index) => (event) => {\r\n    const value = event.target.value\r\n    const coord = indexToCoord(index, gridSize)\r\n    if (selectedWord?.routes[routeId]?.includes(`${coord[0]}${coord[1]}`)) {\r\n      setSelectedWord(null)\r\n    }\r\n\r\n    const newGrid = [...gridValues]\r\n    newGrid[index] = value.toLowerCase()\r\n    setGridValues(newGrid)\r\n    if (value.length > 0) {\r\n      if (\r\n        index < inputRefs.current.length - 1 &&\r\n        inputRefs.current[index + 1] !== null\r\n      ) {\r\n        inputRefs.current[index + 1].focus()\r\n      }\r\n      if (index === gridSize ** 2 - 1) {\r\n        document.getElementById('search-words-btn').focus()\r\n      }\r\n    }\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (selectedWord?.routes[routeId]?.length === 0) return\r\n    for (let i = 0; i < selectedWord?.routes[routeId]?.length; i++) {}\r\n  }, [selectedWord])\r\n\r\n  return (\r\n    <div className=\"flex lg:w-1/2 w-full mx-auto\" name=\"grid-and-buttons\">\r\n      <div className=\" w-full mx-auto justify-items-center\">\r\n        <div\r\n          ref={gridContainerRef}\r\n          id=\"grid-container\"\r\n          name=\"grid-container\"\r\n          className={'grid gap-5 mx-auto justify-items-center'}\r\n        >\r\n          {Array.from({ length: gridSize ** 2 }, (_, index) => {\r\n            const coord = indexToCoord(index, gridSize)\r\n            const routeIndex = selectedWord?.routes[routeId]?.findIndex(\r\n              (item) => item === `${coord[0]}${coord[1]}`\r\n            )\r\n            return (\r\n              <div key={index} className=\"relative\">\r\n                <input\r\n                  value={gridValues[index]}\r\n                  ref={(r) => (inputRefs.current[index] = r)}\r\n                  type=\"text\"\r\n                  className={`${selectedWord?.routes[routeId]?.includes(`${coord[0]}${coord[1]}`) ? (routeIndex === 0 ? 'bg-yellow-300 ' : 'bg-lime-300 ') : ''}xs:w-14 xs:h-14 w-10 h-10 font-bold rounded-md text-center uppercase grid-input-field`}\r\n                  onChange={handleInputChange(index)}\r\n                  onKeyDown={handleInputKey(index)}\r\n                ></input>\r\n                {selectedWord?.routes[routeId]?.includes(\r\n                  `${coord[0]}${coord[1]}`\r\n                ) && (\r\n                  <div className=\"absolute top-0 right-0 bg-black rounded-bl-full text-white font-medium text-sm p-1\">\r\n                    {routeIndex + 1}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n        {selectedWord && (\r\n          <div className=\"flex justify-center items-center text-5xl\">\r\n            <button\r\n              value={-1}\r\n              onClick={(e) => handleRouteChange(e.target.value)}\r\n            >\r\n              &#8592;\r\n            </button>\r\n            <span className=\"text-xl text-white mx-2\">\r\n              {selectedWord.word} {routeId + 1}/{selectedWord?.routes.length}\r\n            </span>\r\n            <button\r\n              value={1}\r\n              onClick={(e) => handleRouteChange(e.target.value)}\r\n            >\r\n              &#8594;\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InputGrid\r\n","import * as React from 'react'\r\n\r\nconst Settings = ({\r\n  changeGridSize,\r\n  listOfDicts,\r\n  setDictionaryNameURL,\r\n  dictionaryNameURL,\r\n  gridSize,\r\n}) => {\r\n  return (\r\n    <section className=\"flex justify-between\">\r\n      <select\r\n        name=\"dictionary-select\"\r\n        id=\"dictionary-select\"\r\n        onChange={(e) => setDictionaryNameURL(JSON.parse(e.target.value))}\r\n        value={JSON.stringify(dictionaryNameURL)}\r\n        className=\"w-5/12 border border-gray-300 rounded-lg bg-slate-100 focus:border-green-500 text-xl  min-h-12 hover:shadow-green-500 shadow-md\"\r\n      >\r\n        {listOfDicts?.map((v) => (\r\n          <option key={v.name} value={JSON.stringify(v)}>\r\n            {v.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <select\r\n        name=\"grid-size-select\"\r\n        id=\"grid-size-select\"\r\n        defaultValue={gridSize}\r\n        className=\"w-5/12 border border-gray-300 rounded-lg bg-slate-100 focus:border-green-500 text-xl  min-h-12 hover:shadow-green-500 shadow-md\"\r\n        onChange={(e) => changeGridSize(e.target.value)}\r\n      >\r\n        <option value={4}>4 x 4</option>\r\n        <option value={5}>5 x 5</option>\r\n        <option value={6}>6 x 6</option>\r\n      </select>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Settings\r\n","import * as React from 'react'\r\n\r\nconst WordInfo = ({ word, routes, setSelectedWord, selectedWord }) => {\r\n  const handleClick = () => {\r\n    setSelectedWord({ word: word, routes: routes })\r\n  }\r\n\r\n  return (\r\n    <div className={`text-center`}>\r\n      <span\r\n        className={`${selectedWord && selectedWord.word === word ? 'border rounded-lg ' : ''}cursor-pointer text-center`}\r\n        onClick={handleClick}\r\n      >\r\n        {word}\r\n      </span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default WordInfo\r\n","import * as React from 'react'\r\nimport WordInfo from './WordInfo'\r\nconst { searchWords } = require('../services/SearchWords')\r\nconst { convertArrayTo2D } = require('../services/ArrayGraph')\r\n\r\nconst WordList = ({\r\n  dictionary,\r\n  gridValues,\r\n  gridSize,\r\n  setSelectedWord,\r\n  selectedWord,\r\n}) => {\r\n  const [wordRoutes, setWordRoutes] = React.useState({})\r\n  const [findError, setFindError] = React.useState('')\r\n\r\n  const handleSearch = () => {\r\n    for (let i = 0; i < gridValues.length; i++) {\r\n      if (gridValues[i].length === 0) {\r\n        setFindError('Täytä taulukko')\r\n        setWordRoutes({})\r\n        return\r\n      }\r\n    }\r\n\r\n    setFindError('')\r\n\r\n    const array2D = convertArrayTo2D(gridValues, gridSize)\r\n    const startTime = performance.now()\r\n    const result = searchWords(array2D, dictionary) // result = [word, coordinate, coordinate,...]\r\n    const endTime = performance.now()\r\n    console.log('search dureation:', endTime - startTime, 'milliseconds')\r\n    if (result.length > 0) {\r\n      organizeFoundWords(result)\r\n    }\r\n  }\r\n\r\n  const organizeFoundWords = (words) => {\r\n    const sortedByLength = words.sort(\r\n      (a, b) => b[0].length - a[0].length || a[0].localeCompare(b[0], 'fi')\r\n    )\r\n    const newWordRoutes = {}\r\n    for (let i = 0; i < sortedByLength.length; i++) {\r\n      if (!(sortedByLength[i][0] in newWordRoutes)) {\r\n        newWordRoutes[sortedByLength[i][0]] = [sortedByLength[i].splice(1)]\r\n      } else {\r\n        newWordRoutes[sortedByLength[i][0]].push(sortedByLength[i].splice(1))\r\n      }\r\n    }\r\n    setWordRoutes(newWordRoutes)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <section className=\"flex justify-center mx-2\">\r\n        <div>\r\n          <p className=\"text-center my-2 text-red-500 text-xl\" id=\"find-error\">\r\n            {findError}\r\n          </p>\r\n          <button\r\n            name=\"search-words-btn\"\r\n            id=\"search-words-btn\"\r\n            className=\"border rounded-lg min-h-12 w-80 bg-slate-100\"\r\n            onClick={handleSearch}\r\n          >\r\n            Etsi sanat\r\n          </button>\r\n        </div>\r\n      </section>\r\n      <section className=\"grid gap-2 grid-cols-1 md:grid-cols-3 xs:grid-cols-2 justify-items-center text-2xl text-slate-100 my-4\">\r\n        {Object.keys(wordRoutes)\r\n          .sort((a, b) => b.length - a.length || a.localeCompare(b, 'fi'))\r\n          .map((word, i) => (\r\n            <WordInfo\r\n              key={i}\r\n              word={word}\r\n              routes={wordRoutes[word]}\r\n              setSelectedWord={setSelectedWord}\r\n              selectedWord={selectedWord}\r\n            />\r\n          ))}\r\n      </section>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default WordList\r\n","import { useState, useEffect } from 'react'\r\n\r\nfunction getStorageValue(key, defaultValue) {\r\n  if (typeof window !== 'undefined') {\r\n    const saved = localStorage.getItem(key)\r\n    const initial = JSON.parse(saved)\r\n    return initial || defaultValue\r\n  } else {\r\n    return defaultValue\r\n  }\r\n}\r\n\r\nexport const useLocalStorage = (key, defaultValue) => {\r\n  const [value, setValue] = useState(() => {\r\n    return getStorageValue(key, defaultValue)\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (typeof window !== 'undefined') {\r\n      localStorage.setItem(key, JSON.stringify(value))\r\n    }\r\n  }, [key, value])\r\n\r\n  return [value, setValue]\r\n}\r\n","import * as React from 'react'\r\nimport '../styles/global.css'\r\n\r\nimport InputGrid from '../components/InputGrid'\r\nimport Settings from '../components/Settings'\r\nimport WordList from '../components/WordList'\r\n\r\nimport { useLocalStorage } from '../hooks/useLocalStorage'\r\n\r\nimport { graphql } from 'gatsby'\r\n\r\n// import dictJSON from '../data/dictionaries/Suomi-kotus.json'\r\n\r\nconst IndexPage = ({ data }) => {\r\n  let baseURL = ''\r\n  if (process.env.NODE_ENV === 'production') {\r\n    baseURL = process.env.GATSBY_BASE_URL\r\n  }\r\n  //const [gridSize, setGridSize] = React.useState(4)\r\n  const [gridSize, setGridSize] = useLocalStorage('gridSize', 4)\r\n  const [gridValues, setGridValues] = React.useState(\r\n    Array.from({ length: gridSize ** 2 }, () => '')\r\n  )\r\n  const [selectedWord, setSelectedWord] = React.useState(null)\r\n  const [dictionary, setDictionary] = React.useState([])\r\n  const listOfDicts = data.allFile.nodes\r\n  const [dictionaryNameURL, setDictionaryNameURL] = useLocalStorage(\r\n    'currentDictionary',\r\n    listOfDicts[0]\r\n  )\r\n\r\n  const changeGridSize = (value) => {\r\n    setGridSize(value)\r\n    setGridValues(Array.from({ length: value * value }, () => ''))\r\n    setSelectedWord(null)\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    const loadDictionary = () => {\r\n      if (!dictionaryNameURL) return\r\n      fetch(`${baseURL}${dictionaryNameURL.publicURL}`)\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setDictionary(data)\r\n        })\r\n    }\r\n\r\n    loadDictionary()\r\n  }, [dictionaryNameURL, baseURL])\r\n\r\n  return (\r\n    <main className=\"max-w-4xl mx-auto\">\r\n      <div className=\"m-2 sm:m-12\">\r\n        <section>\r\n          <h1 className=\"text-center text-5xl my-12 text-slate-100 text-decoration: underline\">\r\n            Boggle Ratkaisin\r\n          </h1>\r\n          <Settings\r\n            changeGridSize={changeGridSize}\r\n            listOfDicts={listOfDicts}\r\n            setDictionaryNameURL={setDictionaryNameURL}\r\n            gridSize={gridSize}\r\n            dictionaryNameURL={dictionaryNameURL}\r\n          />\r\n          <section className=\"block lg:flex justify-between my-12\">\r\n            <div className=\"lg:w-1/2 w-full text-xl px-4 lg:my-0 my-12 text-slate-100\">\r\n              <p>Valitse sanakirja ja pelilaudan koko.</p>\r\n              <p>Kirjaa pelilaudan nopissa näkyvät kirjaimet taulukkoon.</p>\r\n            </div>\r\n            <InputGrid\r\n              gridValues={gridValues}\r\n              setGridValues={setGridValues}\r\n              selectedWord={selectedWord}\r\n              setSelectedWord={setSelectedWord}\r\n              gridSize={gridSize}\r\n            />\r\n          </section>\r\n        </section>\r\n        <WordList\r\n          dictionary={dictionary}\r\n          gridValues={gridValues}\r\n          setSelectedWord={setSelectedWord}\r\n          gridSize={gridSize}\r\n          selectedWord={selectedWord}\r\n        />\r\n      </div>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allFile(\r\n      filter: {\r\n        relativeDirectory: { eq: \"dictionaries\" }\r\n        extension: { eq: \"json\" }\r\n      }\r\n      sort: { name: ASC }\r\n    ) {\r\n      nodes {\r\n        name\r\n        publicURL\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default IndexPage\r\n\r\nexport const Head = () => <title>Boggle Ratkaisin</title>\r\n","const convertArrayTo2D = (array, gridSize) => {\r\n  const graph = []\r\n  for (let rowI = 0; rowI < gridSize; rowI++) {\r\n    const new_row = []\r\n    for (let colI = 0; colI < gridSize; colI++) {\r\n      new_row.push(array[rowI * gridSize + colI])\r\n    }\r\n    graph.push(new_row)\r\n  }\r\n\r\n  return graph\r\n}\r\n\r\nconst indexToCoord = (index, gridSize) => {\r\n  const row = Math.floor(index / gridSize)\r\n  const col = index % gridSize\r\n  return [row, col]\r\n}\r\n\r\nmodule.exports = {\r\n  convertArrayTo2D,\r\n  indexToCoord,\r\n}\r\n","/**\r\n *\r\n * @param {Array} graph 2D array\r\n * @param {Array} dictionary list of words\r\n */\r\nconst searchWords = (graph, dictionary) => {\r\n  let found = []\r\n  for (let row = 0; row < graph.length; row++) {\r\n    for (let col = 0; col < graph[0].length; col++) {\r\n      const result = dfs(graph, row, col, [], [], dictionary)\r\n      if (result.length > 0) {\r\n        found = [...found, ...result]\r\n      }\r\n    }\r\n  }\r\n  return found.sort((a, b) => a[0].localeCompare(b[0]))\r\n}\r\n\r\nconst directions = [\r\n  [0, 1],\r\n  [1, 1],\r\n  [1, 0],\r\n  [1, -1],\r\n  [0, -1],\r\n  [-1, -1],\r\n  [-1, 0],\r\n  [-1, 1],\r\n]\r\n\r\n/**\r\n * @param {array} graph 2D array\r\n * @param {number} row row index\r\n *  @param {number} colI column index\r\n *  @param {array} visitedC array of visited coordinates 'row,col'\r\n *  @param {array} visitedL array of visited letters*/\r\nconst dfs = (graph, rowI, colI, visitedC, visitedL, dictionary) => {\r\n  const currentNodeStr = `${rowI}${colI}`\r\n  if (visitedC.includes(currentNodeStr)) {\r\n    return []\r\n  }\r\n  visitedC.push(currentNodeStr)\r\n  visitedL.push(graph[rowI][colI])\r\n  // console.log('dfs', 'node', currentNodeStr, visitedC, visitedL)\r\n  let found = []\r\n\r\n  const binResult = binarySearchDict(visitedL.join(''), dictionary)\r\n  // console.log('bin', binResult)\r\n  if (binResult[0] === true) {\r\n    found.push([visitedL.join(''), ...visitedC])\r\n  } else if (binResult[1] === false) {\r\n    // console.log('Älä ees yritä')\r\n    visitedC.pop()\r\n    visitedL.pop()\r\n    return []\r\n  }\r\n\r\n  // console.log('node', currentNodeStr, 'before new directions, found', found)\r\n\r\n  for (let i = 0; i < directions.length; i++) {\r\n    const nextNode = [rowI + directions[i][0], colI + directions[i][1]]\r\n    // console.log('current node', currentNodeStr, 'nextnode', nextNode)\r\n    if (\r\n      nextNode[0] < 0 ||\r\n      nextNode[1] < 0 ||\r\n      nextNode[0] >= graph.length ||\r\n      nextNode[1] >= graph[0].length\r\n    ) {\r\n      continue\r\n    }\r\n\r\n    const result = dfs(\r\n      graph,\r\n      nextNode[0],\r\n      nextNode[1],\r\n      visitedC,\r\n      visitedL,\r\n      dictionary\r\n    )\r\n    if (result.length > 0) {\r\n      found = [...found, ...result]\r\n    }\r\n  }\r\n\r\n  // console.log('node', currentNodeStr, 'after new directions, found', found)\r\n\r\n  visitedC.pop()\r\n  visitedL.pop()\r\n  return found\r\n}\r\n\r\nconst binarySearchDict = (word, dictionary) => {\r\n  const wordList = dictionary.words\r\n  let start = 0\r\n  let end = wordList.length\r\n  let beginsWith = false\r\n\r\n  while (true) {\r\n    // let quotient = (end-start / 2) | 0;\r\n    const middlepoint = start + Math.floor((end - start) / 2)\r\n    // console.log(start, middlepoint, end, dictionary[middlepoint])\r\n\r\n    const comparison = word.localeCompare(\r\n      wordList[middlepoint],\r\n      dictionary.language\r\n    )\r\n    if (comparison === 0) {\r\n      return [true, middlepoint]\r\n    }\r\n    if (\r\n      middlepoint >= 0 &&\r\n      middlepoint <= wordList.length - 1 &&\r\n      wordList[middlepoint].startsWith(word)\r\n    ) {\r\n      beginsWith = true // word can be found later\r\n    }\r\n    if (end - start <= 0) {\r\n      return [false, beginsWith]\r\n    }\r\n    if (comparison === 1) {\r\n      start = middlepoint + 1\r\n    }\r\n    if (comparison === -1) {\r\n      end = middlepoint - 1\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  searchWords,\r\n  binarySearchDict,\r\n  dfs,\r\n}\r\n","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\nvar iterableToArray = require(\"./iterableToArray.js\");\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;"],"names":["indexToCoord","require","_ref","gridSize","gridValues","setGridValues","selectedWord","setSelectedWord","gridContainerRef","React","inputRefs","routeId","setRouteId","handleRouteChange","value","newId","Number","routes","length","gridContainer","current","window","matchMedia","matches","style","gridTemplateColumns","width","handleInputKey","index","event","includes","key","prevInput","focus","selectionStart","selectionEnd","nextInput","handleInputChange","_selectedWord$routes$","target","coord","newGrid","_toConsumableArray","toLowerCase","document","getElementById","_selectedWord$routes$2","i","_selectedWord$routes$3","className","name","ref","id","Array","from","_","_selectedWord$routes$4","_selectedWord$routes$5","_selectedWord$routes$6","routeIndex","findIndex","item","r","type","onChange","onKeyDown","onClick","e","word","changeGridSize","listOfDicts","setDictionaryNameURL","dictionaryNameURL","JSON","parse","stringify","map","v","defaultValue","handleClick","searchWords","convertArrayTo2D","dictionary","wordRoutes","setWordRoutes","findError","setFindError","organizeFoundWords","words","sortedByLength","sort","a","b","localeCompare","newWordRoutes","push","splice","handleSearch","array2D","startTime","performance","now","result","endTime","console","log","Object","keys","WordInfo","useLocalStorage","setValue","useState","saved","localStorage","getItem","getStorageValue","useEffect","setItem","data","baseURL","process","setGridSize","setDictionary","allFile","nodes","fetch","publicURL","then","res","json","Settings","InputGrid","WordList","Head","module","exports","array","graph","rowI","new_row","colI","Math","floor","directions","dfs","visitedC","visitedL","currentNodeStr","found","binResult","binarySearchDict","join","concat","pop","nextNode","wordList","start","end","beginsWith","middlepoint","comparison","language","startsWith","row","col","arr","len","arr2","__esModule","arrayLikeToArray","isArray","iter","Symbol","iterator","TypeError","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","o","minLen","n","prototype","toString","call","slice","constructor","test"],"sourceRoot":""}