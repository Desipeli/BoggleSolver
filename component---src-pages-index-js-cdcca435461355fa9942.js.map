{"version":3,"file":"component---src-pages-index-js-cdcca435461355fa9942.js","mappings":"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","sources":["webpack://boggle-solver/./src/components/InputGrid.jsx","webpack://boggle-solver/./src/components/Settings.jsx","webpack://boggle-solver/./src/components/WordList.jsx","webpack://boggle-solver/./src/pages/index.js","webpack://boggle-solver/./src/services/ArrayGraph.js","webpack://boggle-solver/./src/services/SearchWords.js","webpack://boggle-solver/./node_modules/@babel/runtime/helpers/arrayLikeToArray.js","webpack://boggle-solver/./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack://boggle-solver/./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack://boggle-solver/./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack://boggle-solver/./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack://boggle-solver/./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js"],"sourcesContent":["import * as React from 'react'\r\n\r\nconst InputGrid = ({ rowCount, colCount, gridValues, setGridValues }) => {\r\n  const gridContainerRef = React.useRef(null)\r\n  const inputRefs = React.useRef([])\r\n\r\n  React.useEffect(() => {\r\n    const gridContainer = gridContainerRef.current\r\n\r\n    const mediaQuery = window.matchMedia('(max-width: 400px)')\r\n\r\n    if (mediaQuery.matches) {\r\n      gridContainer.style.gridTemplateColumns = `repeat(${colCount}, minmax(0, 1fr))`\r\n      gridContainer.style.width = `${colCount * 3}rem`\r\n    } else {\r\n      gridContainer.style.gridTemplateColumns = `repeat(${colCount}, minmax(0, 1fr))`\r\n      gridContainer.style.width = `${colCount * 4}rem`\r\n    }\r\n  }, [colCount])\r\n\r\n  const handleInputKey = (index) => (event) => {\r\n    if (['Backspace'].includes(event.key) && index > 0) {\r\n      if (inputRefs.current[index].value.length === 0) {\r\n        const prevInput = inputRefs.current[index - 1]\r\n        prevInput.focus()\r\n        prevInput.selectionStart = prevInput.value.length\r\n        prevInput.selectionEnd = prevInput.value.length\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleInputChange = (index) => (event) => {\r\n    const value = event.target.value\r\n    const newGrid = [...gridValues]\r\n    newGrid[index] = value.toLowerCase()\r\n    setGridValues(newGrid)\r\n    if (value.length > 0) {\r\n      if (index < inputRefs.current.length - 1) {\r\n        inputRefs.current[index + 1].focus()\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      ref={gridContainerRef}\r\n      id=\"grid-container\"\r\n      name=\"grid-container\"\r\n      className={`grid gap-5 lg:w-1/2 max-w-56 xs:max-w-lg w-full mx-auto justify-items-center`}\r\n    >\r\n      {Array.from({ length: rowCount * colCount }, (_, index) => (\r\n        <input\r\n          key={index}\r\n          ref={(r) => (inputRefs.current[index] = r)}\r\n          type=\"text\"\r\n          className=\"xs:w-14 xs:h-14 w-10 h-10 font-bold rounded-md text-center uppercase grid-input-field\"\r\n          onChange={handleInputChange(index)}\r\n          onKeyDown={handleInputKey(index)}\r\n        ></input>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InputGrid\r\n","import * as React from 'react'\r\n\r\nconst Settings = ({ rowCount, colCount, setRowCount, setColCount }) => {\r\n  const handleSelect = (value) => {\r\n    setColCount(value)\r\n    setRowCount(value)\r\n  }\r\n\r\n  return (\r\n    <section className=\"flex justify-between\">\r\n      <select\r\n        name=\"language\"\r\n        id=\"language\"\r\n        className=\"w-5/12 border border-gray-300 rounded-lg bg-slate-100 focus:border-green-500 text-xl  min-h-12 hover:shadow-green-500 shadow-md\"\r\n      >\r\n        <option value=\"fin\">Suomi</option>\r\n      </select>\r\n      <select\r\n        name=\"grid-size-select\"\r\n        id=\"grid-size-select\"\r\n        defaultValue={5}\r\n        className=\"w-5/12 border border-gray-300 rounded-lg bg-slate-100 focus:border-green-500 text-xl  min-h-12 hover:shadow-green-500 shadow-md\"\r\n        onChange={(e) => handleSelect(e.target.value)}\r\n      >\r\n        <option value={5}>5 x 5</option>\r\n        <option value={4}>4 x 4</option>\r\n      </select>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Settings\r\n","import * as React from 'react'\r\nconst { searchWords } = require('../services/SearchWords')\r\nconst { convertArrayTo2D } = require('../services/ArrayGraph')\r\n\r\nconst WordList = ({ dictionary, gridValues, rowCount, colCount }) => {\r\n  const [foundWords, setFoundWords] = React.useState([])\r\n  const [findError, setFindError] = React.useState('')\r\n\r\n  const handleSearch = () => {\r\n    for (let i = 0; i < gridValues.length; i++) {\r\n      if (gridValues[i].length === 0) {\r\n        setFindError('Täytä taulukko')\r\n        return\r\n      }\r\n    }\r\n\r\n    setFindError('')\r\n\r\n    const array2D = convertArrayTo2D(gridValues, rowCount, colCount)\r\n    const result = searchWords(array2D, dictionary) // result = [word, coordinate, coordinate,...]\r\n    if (result.length > 0) {\r\n      organizeFoundWords(result)\r\n    }\r\n  }\r\n\r\n  const organizeFoundWords = (words) => {\r\n    const sortedByLength = words.sort(\r\n      (a, b) => b[0].length - a[0].length || a[0].localeCompare(b[0], 'fi')\r\n    )\r\n    setFoundWords(sortedByLength)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <section className=\"flex justify-center mx-2\">\r\n        <div>\r\n          <p className=\"text-center my-2 text-red-500 text-xl\" id=\"find-error\">\r\n            {findError}\r\n          </p>\r\n          <button\r\n            name=\"search-words-btn\"\r\n            className=\"border rounded-lg min-h-12 w-80 bg-slate-100\"\r\n            onClick={handleSearch}\r\n          >\r\n            Etsi sanat\r\n          </button>\r\n        </div>\r\n      </section>\r\n      <section className=\"grid gap-2 grid-cols-1 xs:grid-cols-2 justify-items-center text-2xl text-slate-100 my-4\">\r\n        {foundWords.map((v, i) => (\r\n          <p key={i}>{v[0]}</p>\r\n        ))}\r\n      </section>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default WordList\r\n","import * as React from 'react'\r\nimport '../styles/global.css'\r\n\r\nimport InputGrid from '../components/InputGrid'\r\nimport Settings from '../components/Settings'\r\nimport WordList from '../components/WordList'\r\n// import { graphql } from 'gatsby'\r\n\r\nimport dictJSON from '../data/sanalista.json'\r\n\r\nconst IndexPage = ({ data }) => {\r\n  // console.log(process.env.GATSBY_BASE_URL)\r\n  // const wordListURL =\r\n  //   process.env.GATSBY_BASE_URL +\r\n  //   data.allFile.nodes.map((node) => node.publicURL)\r\n\r\n  const [rowCount, setRowCount] = React.useState(5)\r\n  const [colCount, setColCount] = React.useState(5)\r\n  const [gridValues, setGridValues] = React.useState(\r\n    Array.from({ length: rowCount * colCount }, () => '')\r\n  )\r\n\r\n  const dictionary = dictJSON.words\r\n\r\n  return (\r\n    <main className=\"max-w-4xl mx-auto\">\r\n      <div className=\"m-2 sm:m-12\">\r\n        <section>\r\n          <h1 className=\"text-center text-5xl my-12 text-slate-100 text-decoration: underline\">\r\n            Boggle Ratkaisin\r\n          </h1>\r\n          <Settings\r\n            colCount={colCount}\r\n            rowCount={rowCount}\r\n            setColCount={setColCount}\r\n            setRowCount={setRowCount}\r\n          />\r\n          <section className=\"block lg:flex justify-between my-12\">\r\n            <div className=\"lg:w-1/2 w-full text-xl px-4 lg:my-0 my-12 text-slate-100\">\r\n              <p>Valitse kieli ja pelilaudan koko.</p>\r\n              <p>Kirjaa pelilaudan nopissa näkyvät kirjaimet taulukkoon.</p>\r\n            </div>\r\n            <InputGrid\r\n              rowCount={rowCount}\r\n              colCount={colCount}\r\n              gridValues={gridValues}\r\n              setGridValues={setGridValues}\r\n            />\r\n          </section>\r\n        </section>\r\n        <WordList\r\n          dictionary={dictionary}\r\n          gridValues={gridValues}\r\n          rowCount={rowCount}\r\n          colCount={colCount}\r\n        />\r\n      </div>\r\n    </main>\r\n  )\r\n}\r\n\r\n// export const query = graphql`\r\n//   query MyQuery {\r\n//     allFile(filter: { name: { eq: \"sanalista\" }, extension: { eq: \"json\" } }) {\r\n//       nodes {\r\n//         base\r\n//         publicURL\r\n//       }\r\n//     }\r\n//   }\r\n// `\r\n\r\nexport default IndexPage\r\n\r\nexport const Head = () => <title>Home Page</title>\r\n","const convertArrayTo2D = (array, rowCount, colCount) => {\r\n  const graph = []\r\n  for (let rowI = 0; rowI < rowCount; rowI++) {\r\n    const new_row = []\r\n    for (let colI = 0; colI < colCount; colI++) {\r\n      new_row.push(array[rowI * colCount + colI])\r\n    }\r\n    graph.push(new_row)\r\n  }\r\n\r\n  return graph\r\n}\r\n\r\nmodule.exports = {\r\n  convertArrayTo2D,\r\n}\r\n","/**\r\n *\r\n * @param {Array} graph 2D array\r\n * @param {Array} dictionary list of words\r\n */\r\nconst searchWords = (graph, dictionary) => {\r\n  let found = [] // [{\"sana\": [[1,3],[2,3],...]}]\r\n  for (let row = 0; row < graph.length; row++) {\r\n    for (let col = 0; col < graph[0].length; col++) {\r\n      console.log('Starting with ', row, col)\r\n      const result = dfs(graph, row, col, [], [], dictionary)\r\n      console.log('result', result)\r\n      console.log()\r\n      if (result.length > 0) {\r\n        found = [...found, ...result]\r\n      }\r\n    }\r\n  }\r\n  return found.sort((a, b) => a[0].localeCompare(b[0]))\r\n}\r\n\r\nconst directions = [\r\n  [0, 1],\r\n  [1, 1],\r\n  [1, 0],\r\n  [1, -1],\r\n  [0, -1],\r\n  [-1, -1],\r\n  [-1, 0],\r\n  [-1, 1],\r\n]\r\n\r\n/**\r\n * @param {array} graph 2D array\r\n * @param {number} row row index\r\n *  @param {number} colI column index\r\n *  @param {array} visitedC array of visited coordinates 'row,col'\r\n *  @param {array} visitedL array of visited letters*/\r\nconst dfs = (graph, rowI, colI, visitedC, visitedL, dictionary) => {\r\n  const currentNodeStr = `${rowI}${colI}`\r\n  if (visitedC.includes(currentNodeStr)) {\r\n    return []\r\n  }\r\n  visitedC.push(currentNodeStr)\r\n  visitedL.push(graph[rowI][colI])\r\n  // console.log('dfs', 'node', currentNodeStr, visitedC, visitedL)\r\n  let found = []\r\n\r\n  const binResult = binarySearchDict(visitedL.join(''), dictionary)\r\n  // console.log('bin', binResult)\r\n  if (binResult[0] === true) {\r\n    found.push([visitedL.join(''), ...visitedC])\r\n  } else if (binResult[1] === false) {\r\n    // console.log('Älä ees yritä')\r\n    visitedC.pop()\r\n    visitedL.pop()\r\n    return []\r\n  }\r\n\r\n  // console.log('node', currentNodeStr, 'before new directions, found', found)\r\n\r\n  for (let i = 0; i < directions.length; i++) {\r\n    const nextNode = [rowI + directions[i][0], colI + directions[i][1]]\r\n    // console.log('current node', currentNodeStr, 'nextnode', nextNode)\r\n    if (\r\n      nextNode[0] < 0 ||\r\n      nextNode[1] < 0 ||\r\n      nextNode[0] >= graph.length ||\r\n      nextNode[1] >= graph[0].length\r\n    ) {\r\n      continue\r\n    }\r\n\r\n    const result = dfs(\r\n      graph,\r\n      nextNode[0],\r\n      nextNode[1],\r\n      visitedC,\r\n      visitedL,\r\n      dictionary\r\n    )\r\n    if (result.length > 0) {\r\n      found = [...found, ...result]\r\n    }\r\n  }\r\n\r\n  // console.log('node', currentNodeStr, 'after new directions, found', found)\r\n\r\n  visitedC.pop()\r\n  visitedL.pop()\r\n  return found\r\n}\r\n\r\nconst binarySearchDict = (word, dictionary) => {\r\n  let start = 0\r\n  let end = dictionary.length\r\n  let beginsWith = false\r\n\r\n  while (true) {\r\n    // let quotient = (end-start / 2) | 0;\r\n    const middlepoint = start + Math.floor((end - start) / 2)\r\n    // console.log(start, middlepoint, end, dictionary[middlepoint])\r\n\r\n    const comparison = word.localeCompare(dictionary[middlepoint], 'fi')\r\n    if (comparison === 0) {\r\n      return [true, middlepoint]\r\n    }\r\n    if (\r\n      middlepoint >= 0 &&\r\n      middlepoint <= dictionary.length - 1 &&\r\n      dictionary[middlepoint].startsWith(word)\r\n    ) {\r\n      beginsWith = true // word can be found later\r\n    }\r\n    if (end - start <= 0) {\r\n      return [false, beginsWith]\r\n    }\r\n    if (comparison === 1) {\r\n      start = middlepoint + 1\r\n    }\r\n    if (comparison === -1) {\r\n      end = middlepoint - 1\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  searchWords,\r\n  binarySearchDict,\r\n  dfs,\r\n}\r\n","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\nvar iterableToArray = require(\"./iterableToArray.js\");\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;"],"names":["_ref","rowCount","colCount","gridValues","setGridValues","gridContainerRef","React","inputRefs","gridContainer","current","window","matchMedia","matches","style","gridTemplateColumns","width","handleInputKey","index","event","includes","key","value","length","prevInput","focus","selectionStart","selectionEnd","handleInputChange","target","newGrid","_toConsumableArray","toLowerCase","ref","id","name","className","Array","from","_","r","type","onChange","onKeyDown","setRowCount","setColCount","defaultValue","e","handleSelect","searchWords","require","convertArrayTo2D","dictionary","foundWords","setFoundWords","findError","setFindError","organizeFoundWords","words","sortedByLength","sort","a","b","localeCompare","onClick","handleSearch","i","array2D","result","map","v","data","dictJSON","Settings","InputGrid","WordList","Head","module","exports","array","graph","rowI","new_row","colI","push","directions","dfs","visitedC","visitedL","currentNodeStr","found","binResult","binarySearchDict","join","concat","pop","nextNode","word","start","end","beginsWith","middlepoint","Math","floor","comparison","startsWith","row","col","console","log","arr","len","arr2","__esModule","arrayLikeToArray","isArray","iter","Symbol","iterator","TypeError","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","o","minLen","n","Object","prototype","toString","call","slice","constructor","test"],"sourceRoot":""}