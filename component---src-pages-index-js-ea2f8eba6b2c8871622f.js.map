{"version":3,"file":"component---src-pages-index-js-ea2f8eba6b2c8871622f.js","mappings":"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","sources":["webpack://boggle-solver/./src/components/InputGrid.jsx","webpack://boggle-solver/./src/components/Settings.jsx","webpack://boggle-solver/./src/components/WordInfo.jsx","webpack://boggle-solver/./src/components/WordList.jsx","webpack://boggle-solver/./src/pages/index.js","webpack://boggle-solver/./src/services/ArrayGraph.js","webpack://boggle-solver/./src/services/SearchWords.js","webpack://boggle-solver/./node_modules/@babel/runtime/helpers/arrayLikeToArray.js","webpack://boggle-solver/./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack://boggle-solver/./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack://boggle-solver/./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack://boggle-solver/./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack://boggle-solver/./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js"],"sourcesContent":["import * as React from 'react'\r\nconst { indexToCoord } = require('../services/ArrayGraph')\r\n\r\nconst InputGrid = ({\r\n  rowCount,\r\n  colCount,\r\n  gridValues,\r\n  setGridValues,\r\n  highlightedRoute,\r\n}) => {\r\n  const gridContainerRef = React.useRef(null)\r\n  const inputRefs = React.useRef([])\r\n\r\n  React.useEffect(() => {\r\n    const gridContainer = gridContainerRef.current\r\n\r\n    const mediaQuery = window.matchMedia('(max-width: 400px)')\r\n\r\n    if (mediaQuery.matches) {\r\n      gridContainer.style.gridTemplateColumns = `repeat(${colCount}, minmax(0, 1fr))`\r\n      gridContainer.style.width = `${colCount * 3}rem`\r\n    } else {\r\n      gridContainer.style.gridTemplateColumns = `repeat(${colCount}, minmax(0, 1fr))`\r\n      gridContainer.style.width = `${colCount * 4}rem`\r\n    }\r\n  }, [colCount])\r\n\r\n  const handleInputKey = (index) => (event) => {\r\n    if (['Backspace'].includes(event.key) && index > 0) {\r\n      if (inputRefs.current[index].value.length === 0) {\r\n        const prevInput = inputRefs.current[index - 1]\r\n        prevInput.focus()\r\n        prevInput.selectionStart = prevInput.value.length\r\n        prevInput.selectionEnd = prevInput.value.length\r\n      }\r\n    }\r\n    if (['Delete'].includes(event.key) && index < rowCount * colCount - 1) {\r\n      if (inputRefs.current[index].value.length === 0) {\r\n        const nextInput = inputRefs.current[index + 1]\r\n        nextInput.focus()\r\n        nextInput.selectionStart = 0\r\n        nextInput.selectionEnd = 0\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleInputChange = (index) => (event) => {\r\n    const value = event.target.value\r\n    const newGrid = [...gridValues]\r\n    newGrid[index] = value.toLowerCase()\r\n    setGridValues(newGrid)\r\n    if (value.length > 0) {\r\n      if (\r\n        index < inputRefs.current.length - 1 &&\r\n        inputRefs.current[index + 1] !== null\r\n      ) {\r\n        inputRefs.current[index + 1].focus()\r\n      }\r\n    }\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (highlightedRoute.length === 0) return\r\n    for (let i = 0; i < highlightedRoute.length; i++) {}\r\n  }, [highlightedRoute])\r\n\r\n  return (\r\n    <div\r\n      ref={gridContainerRef}\r\n      id=\"grid-container\"\r\n      name=\"grid-container\"\r\n      className={`grid gap-5 lg:w-1/2 xs:max-w-lg w-full mx-auto justify-items-center`}\r\n    >\r\n      {Array.from({ length: rowCount * colCount }, (_, index) => (\r\n        <div key={index} className=\"relative\">\r\n          <input\r\n            value={gridValues[index]}\r\n            ref={(r) => (inputRefs.current[index] = r)}\r\n            type=\"text\"\r\n            className={`${highlightedRoute.includes(`${indexToCoord(index, colCount)[0]}${indexToCoord(index, colCount)[1]}`) ? 'bg-lime-300 ' : ''}xs:w-14 xs:h-14 w-10 h-10 font-bold rounded-md text-center uppercase grid-input-field`}\r\n            onChange={handleInputChange(index)}\r\n            onKeyDown={handleInputKey(index)}\r\n          ></input>\r\n          {highlightedRoute.includes(\r\n            `${indexToCoord(index, colCount)[0]}${indexToCoord(index, colCount)[1]}`\r\n          ) && (\r\n            <div className=\"absolute top-0 right-0 bg-black rounded-bl-full text-white font-medium text-sm p-1\">\r\n              {highlightedRoute.findIndex(\r\n                (item) =>\r\n                  item ===\r\n                  `${indexToCoord(index, colCount)[0]}${indexToCoord(index, colCount)[1]}`\r\n              ) + 1}\r\n            </div>\r\n          )}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InputGrid\r\n","import * as React from 'react'\r\n\r\nconst Settings = ({ setRowCount, setColCount, setGridValues }) => {\r\n  const handleSelect = (value) => {\r\n    setColCount(value)\r\n    setRowCount(value)\r\n    setGridValues(Array.from({ length: value * value }, () => ''))\r\n  }\r\n\r\n  return (\r\n    <section className=\"flex justify-between\">\r\n      <select\r\n        name=\"language\"\r\n        id=\"language\"\r\n        className=\"w-5/12 border border-gray-300 rounded-lg bg-slate-100 focus:border-green-500 text-xl  min-h-12 hover:shadow-green-500 shadow-md\"\r\n      >\r\n        <option value=\"fin\">Suomi</option>\r\n      </select>\r\n      <select\r\n        name=\"grid-size-select\"\r\n        id=\"grid-size-select\"\r\n        defaultValue={5}\r\n        className=\"w-5/12 border border-gray-300 rounded-lg bg-slate-100 focus:border-green-500 text-xl  min-h-12 hover:shadow-green-500 shadow-md\"\r\n        onChange={(e) => handleSelect(e.target.value)}\r\n      >\r\n        <option value={5}>5 x 5</option>\r\n        <option value={4}>4 x 4</option>\r\n      </select>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Settings\r\n","import * as React from 'react'\r\n\r\nconst WordInfo = ({ word, routes, setHighlightedRoute }) => {\r\n  const [show, setShow] = React.useState(false)\r\n\r\n  const handleWordClick = () => {\r\n    setShow(!show)\r\n  }\r\n\r\n  return (\r\n    <div className={`${show ? 'my-4 ' : ''} text-center`}>\r\n      <span className=\"cursor-pointer text-center\" onClick={handleWordClick}>\r\n        {word}\r\n      </span>\r\n      {show &&\r\n        routes.map((route, routeI) => (\r\n          <div key={routeI}>\r\n            <p\r\n              onClick={() => setHighlightedRoute(route)}\r\n              className=\"cursor-pointer\"\r\n            >\r\n              {route.toString()}\r\n            </p>\r\n          </div>\r\n        ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default WordInfo\r\n","import * as React from 'react'\r\nimport WordInfo from './WordInfo'\r\nconst { searchWords } = require('../services/SearchWords')\r\nconst { convertArrayTo2D } = require('../services/ArrayGraph')\r\n\r\nconst WordList = ({\r\n  dictionary,\r\n  gridValues,\r\n  rowCount,\r\n  colCount,\r\n  setHighlightedRoute,\r\n}) => {\r\n  const [wordRoutes, setWordRoutes] = React.useState({})\r\n  const [findError, setFindError] = React.useState('')\r\n\r\n  const handleSearch = () => {\r\n    for (let i = 0; i < gridValues.length; i++) {\r\n      if (gridValues[i].length === 0) {\r\n        setFindError('Täytä taulukko')\r\n        setWordRoutes({})\r\n        return\r\n      }\r\n    }\r\n\r\n    setFindError('')\r\n\r\n    const array2D = convertArrayTo2D(gridValues, rowCount, colCount)\r\n    const result = searchWords(array2D, dictionary) // result = [word, coordinate, coordinate,...]\r\n    if (result.length > 0) {\r\n      organizeFoundWords(result)\r\n    }\r\n  }\r\n\r\n  const organizeFoundWords = (words) => {\r\n    const sortedByLength = words.sort(\r\n      (a, b) => b[0].length - a[0].length || a[0].localeCompare(b[0], 'fi')\r\n    )\r\n    const newWordRoutes = {}\r\n    for (let i = 0; i < sortedByLength.length; i++) {\r\n      if (!(sortedByLength[i][0] in newWordRoutes)) {\r\n        newWordRoutes[sortedByLength[i][0]] = [sortedByLength[i].splice(1)]\r\n      } else {\r\n        newWordRoutes[sortedByLength[i][0]].push(sortedByLength[i].splice(1))\r\n      }\r\n    }\r\n    setWordRoutes(newWordRoutes)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <section className=\"flex justify-center mx-2\">\r\n        <div>\r\n          <p className=\"text-center my-2 text-red-500 text-xl\" id=\"find-error\">\r\n            {findError}\r\n          </p>\r\n          <button\r\n            name=\"search-words-btn\"\r\n            id=\"search-words-btn\"\r\n            className=\"border rounded-lg min-h-12 w-80 bg-slate-100\"\r\n            onClick={handleSearch}\r\n          >\r\n            Etsi sanat\r\n          </button>\r\n        </div>\r\n      </section>\r\n      <section className=\"grid gap-2 grid-cols-1 md:grid-cols-3 xs:grid-cols-2 justify-items-center text-2xl text-slate-100 my-4\">\r\n        {Object.keys(wordRoutes)\r\n          .sort((a, b) => b.length - a.length || a.localeCompare(b, 'fi'))\r\n          .map((word, i) => (\r\n            <WordInfo\r\n              key={i}\r\n              word={word}\r\n              routes={wordRoutes[word]}\r\n              setHighlightedRoute={setHighlightedRoute}\r\n            />\r\n          ))}\r\n      </section>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default WordList\r\n","import * as React from 'react'\r\nimport '../styles/global.css'\r\n\r\nimport InputGrid from '../components/InputGrid'\r\nimport Settings from '../components/Settings'\r\nimport WordList from '../components/WordList'\r\n// import { graphql } from 'gatsby'\r\n\r\nimport dictJSON from '../data/sanalista.json'\r\n\r\nconst IndexPage = ({ data }) => {\r\n  // console.log(process.env.GATSBY_BASE_URL)\r\n  // const wordListURL =\r\n  //   process.env.GATSBY_BASE_URL +\r\n  //   data.allFile.nodes.map((node) => node.publicURL)\r\n\r\n  const [rowCount, setRowCount] = React.useState(5)\r\n  const [colCount, setColCount] = React.useState(5)\r\n  const [gridValues, setGridValues] = React.useState(\r\n    Array.from({ length: rowCount * colCount }, () => '')\r\n  )\r\n  const [highlightedRoute, setHighlightedRoute] = React.useState([])\r\n\r\n  const dictionary = dictJSON.words\r\n\r\n  return (\r\n    <main className=\"max-w-4xl mx-auto\">\r\n      <div className=\"m-2 sm:m-12\">\r\n        <section>\r\n          <h1 className=\"text-center text-5xl my-12 text-slate-100 text-decoration: underline\">\r\n            Boggle Ratkaisin\r\n          </h1>\r\n          <Settings\r\n            setColCount={setColCount}\r\n            setRowCount={setRowCount}\r\n            setGridValues={setGridValues}\r\n          />\r\n          <section className=\"block lg:flex justify-between my-12\">\r\n            <div className=\"lg:w-1/2 w-full text-xl px-4 lg:my-0 my-12 text-slate-100\">\r\n              <p>Valitse kieli ja pelilaudan koko.</p>\r\n              <p>Kirjaa pelilaudan nopissa näkyvät kirjaimet taulukkoon.</p>\r\n            </div>\r\n            <InputGrid\r\n              rowCount={rowCount}\r\n              colCount={colCount}\r\n              gridValues={gridValues}\r\n              setGridValues={setGridValues}\r\n              highlightedRoute={highlightedRoute}\r\n            />\r\n          </section>\r\n        </section>\r\n        <WordList\r\n          dictionary={dictionary}\r\n          gridValues={gridValues}\r\n          rowCount={rowCount}\r\n          colCount={colCount}\r\n          setHighlightedRoute={setHighlightedRoute}\r\n        />\r\n      </div>\r\n    </main>\r\n  )\r\n}\r\n\r\n// export const query = graphql`\r\n//   query MyQuery {\r\n//     allFile(filter: { name: { eq: \"sanalista\" }, extension: { eq: \"json\" } }) {\r\n//       nodes {\r\n//         base\r\n//         publicURL\r\n//       }\r\n//     }\r\n//   }\r\n// `\r\n\r\nexport default IndexPage\r\n\r\nexport const Head = () => <title>Home Page</title>\r\n","const convertArrayTo2D = (array, rowCount, colCount) => {\r\n  const graph = []\r\n  for (let rowI = 0; rowI < rowCount; rowI++) {\r\n    const new_row = []\r\n    for (let colI = 0; colI < colCount; colI++) {\r\n      new_row.push(array[rowI * colCount + colI])\r\n    }\r\n    graph.push(new_row)\r\n  }\r\n\r\n  return graph\r\n}\r\n\r\nconst coordToIndex = (rowIndex, colIndex, colCount) => {\r\n  return rowIndex * colCount + colIndex\r\n}\r\n\r\nconst indexToCoord = (index, colCount) => {\r\n  const row = Math.floor(index / colCount)\r\n  const col = index % colCount\r\n  return [row, col]\r\n}\r\n\r\nmodule.exports = {\r\n  convertArrayTo2D,\r\n  coordToIndex,\r\n  indexToCoord,\r\n}\r\n","/**\r\n *\r\n * @param {Array} graph 2D array\r\n * @param {Array} dictionary list of words\r\n */\r\nconst searchWords = (graph, dictionary) => {\r\n  let found = []\r\n  for (let row = 0; row < graph.length; row++) {\r\n    for (let col = 0; col < graph[0].length; col++) {\r\n      const result = dfs(graph, row, col, [], [], dictionary)\r\n      if (result.length > 0) {\r\n        found = [...found, ...result]\r\n      }\r\n    }\r\n  }\r\n  return found.sort((a, b) => a[0].localeCompare(b[0]))\r\n}\r\n\r\nconst directions = [\r\n  [0, 1],\r\n  [1, 1],\r\n  [1, 0],\r\n  [1, -1],\r\n  [0, -1],\r\n  [-1, -1],\r\n  [-1, 0],\r\n  [-1, 1],\r\n]\r\n\r\n/**\r\n * @param {array} graph 2D array\r\n * @param {number} row row index\r\n *  @param {number} colI column index\r\n *  @param {array} visitedC array of visited coordinates 'row,col'\r\n *  @param {array} visitedL array of visited letters*/\r\nconst dfs = (graph, rowI, colI, visitedC, visitedL, dictionary) => {\r\n  const currentNodeStr = `${rowI}${colI}`\r\n  if (visitedC.includes(currentNodeStr)) {\r\n    return []\r\n  }\r\n  visitedC.push(currentNodeStr)\r\n  visitedL.push(graph[rowI][colI])\r\n  // console.log('dfs', 'node', currentNodeStr, visitedC, visitedL)\r\n  let found = []\r\n\r\n  const binResult = binarySearchDict(visitedL.join(''), dictionary)\r\n  // console.log('bin', binResult)\r\n  if (binResult[0] === true) {\r\n    found.push([visitedL.join(''), ...visitedC])\r\n  } else if (binResult[1] === false) {\r\n    // console.log('Älä ees yritä')\r\n    visitedC.pop()\r\n    visitedL.pop()\r\n    return []\r\n  }\r\n\r\n  // console.log('node', currentNodeStr, 'before new directions, found', found)\r\n\r\n  for (let i = 0; i < directions.length; i++) {\r\n    const nextNode = [rowI + directions[i][0], colI + directions[i][1]]\r\n    // console.log('current node', currentNodeStr, 'nextnode', nextNode)\r\n    if (\r\n      nextNode[0] < 0 ||\r\n      nextNode[1] < 0 ||\r\n      nextNode[0] >= graph.length ||\r\n      nextNode[1] >= graph[0].length\r\n    ) {\r\n      continue\r\n    }\r\n\r\n    const result = dfs(\r\n      graph,\r\n      nextNode[0],\r\n      nextNode[1],\r\n      visitedC,\r\n      visitedL,\r\n      dictionary\r\n    )\r\n    if (result.length > 0) {\r\n      found = [...found, ...result]\r\n    }\r\n  }\r\n\r\n  // console.log('node', currentNodeStr, 'after new directions, found', found)\r\n\r\n  visitedC.pop()\r\n  visitedL.pop()\r\n  return found\r\n}\r\n\r\nconst binarySearchDict = (word, dictionary) => {\r\n  let start = 0\r\n  let end = dictionary.length\r\n  let beginsWith = false\r\n\r\n  while (true) {\r\n    // let quotient = (end-start / 2) | 0;\r\n    const middlepoint = start + Math.floor((end - start) / 2)\r\n    // console.log(start, middlepoint, end, dictionary[middlepoint])\r\n\r\n    const comparison = word.localeCompare(dictionary[middlepoint], 'fi')\r\n    if (comparison === 0) {\r\n      return [true, middlepoint]\r\n    }\r\n    if (\r\n      middlepoint >= 0 &&\r\n      middlepoint <= dictionary.length - 1 &&\r\n      dictionary[middlepoint].startsWith(word)\r\n    ) {\r\n      beginsWith = true // word can be found later\r\n    }\r\n    if (end - start <= 0) {\r\n      return [false, beginsWith]\r\n    }\r\n    if (comparison === 1) {\r\n      start = middlepoint + 1\r\n    }\r\n    if (comparison === -1) {\r\n      end = middlepoint - 1\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  searchWords,\r\n  binarySearchDict,\r\n  dfs,\r\n}\r\n","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\nvar iterableToArray = require(\"./iterableToArray.js\");\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;"],"names":["indexToCoord","require","_ref","rowCount","colCount","gridValues","setGridValues","highlightedRoute","gridContainerRef","React","inputRefs","gridContainer","current","window","matchMedia","matches","style","gridTemplateColumns","width","handleInputKey","index","event","includes","key","value","length","prevInput","focus","selectionStart","selectionEnd","nextInput","handleInputChange","target","newGrid","_toConsumableArray","toLowerCase","i","ref","id","name","className","Array","from","_","r","type","onChange","onKeyDown","findIndex","item","setRowCount","setColCount","defaultValue","e","handleSelect","word","routes","setHighlightedRoute","show","setShow","onClick","handleWordClick","map","route","routeI","toString","searchWords","convertArrayTo2D","dictionary","wordRoutes","setWordRoutes","findError","setFindError","organizeFoundWords","words","sortedByLength","sort","a","b","localeCompare","newWordRoutes","push","splice","handleSearch","array2D","result","Object","keys","WordInfo","data","dictJSON","Settings","InputGrid","WordList","Head","module","exports","array","graph","rowI","new_row","colI","coordToIndex","rowIndex","colIndex","Math","floor","directions","dfs","visitedC","visitedL","currentNodeStr","found","binResult","binarySearchDict","join","concat","pop","nextNode","start","end","beginsWith","middlepoint","comparison","startsWith","row","col","arr","len","arr2","__esModule","arrayLikeToArray","isArray","iter","Symbol","iterator","TypeError","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","o","minLen","n","prototype","call","slice","constructor","test"],"sourceRoot":""}